<?php
/**
 * @file
 * Module main file.
 */

/**
 * Implements hook_permission().
 */
function erri_permission() {
  return array(
    'erri:bypass_revisions' => array(
      'title' => t('Bypass revision referential integrity restrict'),
      'description' => t('Allows users to still delete entities if they are referenced '
              . 'by required fields of revisions of other entities.  <em>Be careful in granting this permission, '
              . 'as it can lead to lack of logical referenital integrity if revisions are '
              . 'restored.  Such revisions would have required fields empty that would have '
              . 'referred to deleted entities.</em>'),
      'restrict access' => TRUE,
    ),
    'erri:bypass_current' => array(
      'title' => t('Bypass current version referential integrity restrict'),
      'description' => t('Allows users to still delete entities if they are referred '
              . 'to by required fields in current versions of other entities.  <em>Be very careful in granting '
              . 'this permission, as it can lead to lack of logical referenital integrity '
              . 'in current data.  Current data would have required fields empty that '
              . 'would have referred to deleted entities.</em>'),
      'restrict access' => TRUE,
    ),
    'erri:change_reference_target' => array(
      'title' => t('Change all reference targets on entity delete'),
      'description' => t('Allows users to change the target entity of all references '
              . 'when deleting entities if they are referred to in other entities, both '
              . 'current version and all revisions.  <em>Be very careful in granting '
              . 'this permission, as it will allow the user to make changes to existing '
              . 'entitites and their revisions that will not be tracked through anything '
              . 'other than log (watchdog) entries.</em>'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().  Determine if there are child entities, and act accordingly.
 */
function erri_form_alter(&$form, &$form_state, $form_id) {
  // Get a list of all delete forms via hook_erri_info().
  static $delete_forms = array();
  if ( empty($delete_forms) ) {
    module_load_include('inc', 'erri');
    foreach ( module_implements('erri_info') as $module ) {
      $function = $module . '_erri_info';
      $result = $function();
      if ( is_array($result) ) {
        $delete_forms += $result;
      }
    }
  }

  // If the current form is a delete form...
  if ( !empty($delete_forms[$form_id]) ) {
    $delete_form = &$delete_forms[$form_id];
    $parent_entity_info = entity_get_info($delete_form['target_type']);
    $form_copy = $form; // Keep the original form array 'safe'.
    $form_state_copy = $form_state; // Keep the original form_state array 'safe'.
    // ...and this is the delete version of the form for forms that serve multiple purposes...
    if ( empty($delete_form['is_delete_form']) ||
            function_exists($delete_form['is_delete_form']) && $delete_form['is_delete_form']($form_copy, $form_state_copy) ) {
      // If 'entity' is specified in the delete from, then this is a single instance delete form.
      if ( !empty($delete_form['entity']) && function_exists($delete_form['entity']) ) {
        $single_item = TRUE;
        // Retrieve the entity being deleted from the form.
        $parent_entity = $delete_form['entity']($form_copy, $form_state_copy);
        // Get the entity's ID.
        $id = $parent_entity->{$parent_entity_info['entity keys']['id']};
        $bundle = !empty($parent_entity_info['entity keys']['bundle'])
                ? $parent_entity->{$parent_entity_info['entity keys']['bundle']}
                : NULL;
        $child_entities = erri_get_child_entities($delete_form['target_type'], $id, $bundle);
        // Keep the field names to avoid redoing the work in the delete submit handler
        // if the entity can indeed be deleted (all children have the parent as optional.
        $title = entity_label($delete_form['target_type'], $parent_entity);
        $form['erri_parent_info'] = array(
          '#type' => 'value',
          '#value' => array($id => array(
            'parent' => $parent_entity,
            'id' => $id,
            'type' => $delete_form['target_type'],
            'bundle' => $bundle,
            'title' => $title,
            'fields' => array_keys($child_entities),
          ),),
        );
      }
      // If 'entities' is specified, then this is a multi-entity delete form.
      elseif ( !empty($delete_form['entities']) && function_exists($delete_form['entities']) ) {
        $single_item = FALSE;
        $child_entities = array();
        // Get the entities from the form.
        $parent_entities = $delete_form['entities']($form_copy, $form_state_copy);
        $parent_entity_ids = element_children($parent_entities);
        $form['erri_parent_info'] = array('#type' => 'value', '#value' => array());
        foreach ( $parent_entity_ids as $id ) {
          // Get the full entity via the entity's load function.
          $parent_entity = $parent_entity_info['load hook']($id);
          // Group index is used as a title for a section.
          $uri = entity_uri($delete_form['target_type'], $parent_entity);
          // Ensure unique array index by combining label and uri path.
          $group_title = entity_label($delete_form['target_type'], $parent_entity);
          $group_index = l($group_title, $uri['path']);
          $bundle = !empty($parent_entity_info['entity keys']['bundle'])
                  ? $parent_entity->{$parent_entity_info['entity keys']['bundle']}
                  : NULL;
          $child_entities[$group_index] = erri_get_child_entities($delete_form['target_type'], $id, $bundle);
          if ( empty($child_entities[$group_index]) ) {
            unset($child_entities[$group_index]);
          }
          else {
            // Keep the field names to avoid redoing the work in the delete submit handler
            // if the entity can indeed be deleted (all children have the parent as optional).
            $form['erri_parent_info']['#value'][$id] = array(
              'parent' => $parent_entity,
              'id' => $id,
              'type' => $delete_form['target_type'],
              'bundle' => $bundle,
              'title' => $group_title,
              'fields' => array_keys($child_entities[$group_index]),
            );
          }
        }
        $title = strtolower($parent_entity_info['plural label']);
      }

      if ( !empty($child_entities) ) {
        // Get the description and submit elements of the form.
        if ( !empty($delete_form['description_element']) ) {
          $element_trail = explode('][', $delete_form['description_element']);
          $description_element = &$form;
          foreach ( $element_trail as $element ) {
            $description_element = &$description_element[$element];
          }
          $description_outer_element = $element_trail[0];
        }
        else {
          $description_element = &$form['description']['#markup'];
          $description_outer_element = 'description';
        }
        if ( !empty($delete_form['submit_element']) ) {
          $element_trail = explode('][', $delete_form['submit_element']);
          $submit_element = &$form;
          foreach ( $element_trail as $element ) {
            $submit_element = &$submit_element[$element];
          }
          $submit_outer_element = $element_trail[0];
        }
        else {
          $submit_element = &$form['actions']['submit'];
          $submit_outer_element = 'actions';
        }

        // Start by assuming no fields are required and the current user has edit
        // permissions.  Then evaluate field-by-field and for each referenced entity,
        // and change accordingly (done in the called functions, so vars passed by
        // reference).
        $has_required = array('current' => FALSE, 'revision' => FALSE);
        $has_edit_permissions = TRUE;
        $description_additions = array('top' => '', 'list' => '', 'bottom' => '');
        if ( $single_item ) {
          $list = _erri_list_children($child_entities, $has_required, $has_edit_permissions);
        }
        else {
          $list = array();
          foreach ( $child_entities as $parent_entity => $children ) {
            $sub_list = _erri_list_children($children, $has_required, $has_edit_permissions);
            $list[] = t('!entity is referenced by:', array('!entity' => $parent_entity)) . '<ul><li>' . implode('</li><li>', $sub_list) . '</li></ul>';
          }
        }
        $description_additions['list'] = '<ul class="erri-referrers"><li>' . implode('</li><li>', $list) . '</li></ul>';
        if ( $has_required['current'] || $has_required['revision'] ) {
          $description_additions['list'] .= '<p><span class="form-required" title="' .
                  t('This field is required.') . '">*</span> ' .
                  t('Required field - cannot be left blank.') . '</p>';
        }

        // Assemble final messages and determine if the delete button should be disabled.
        switch ( TRUE ) {
          case !$has_edit_permissions :
            $description_additions['bottom'] = '<p>' .
                    t('You do not have sufficient permissions on all referring items and / or fields to be able to delete this entity.') .
                    '</p>';
          case $has_required['current'] && !user_access('erri:bypass_current') && !user_access('erri:change_reference_target') :
          case $has_required['revision'] && !user_access('erri:bypass_revisions') && !user_access('erri:change_reference_target') :
            if ( $single_item ) {
              $description_additions['top'] = t('%title cannot be deleted because it is referenced by:', array('%title' => $title));
              drupal_set_title(t('Cannot delete %title', array('%title' => $title)), PASS_THROUGH);
            }
            else {
              $description_additions['top'] = t('One or more of the @title cannot be deleted because:', array('@title' => $title));
              drupal_set_title(t('Cannot delete one or more of the @title', array('@title' => $title)));
            }
            $submit_element['#disabled'] = TRUE;
            break;

          // If we get this far, then the current user has edit permissions on all referring entities and fields,
          // and there are no 'required' fields referencing the entity / entities to be deleted, or
          // there are, but the user either has required bypass permission(s) or they have permission to mass-change the
          // reference target to something else.
          case user_access('erri:change_reference_target') :
            // User has permission to make a mass-change, so if there is a function
            // to determine replacement candidates...
            if ( !empty($delete_form['candidates']) && function_exists($delete_form['candidates']) ) {
              // If the current user cannot bypass the 'required' aspect but they have the mass-replacement permission,
              // then make this field required to delete the entity.
              $required = $has_required['current'] && !user_access('erri:bypass_current') ||
                      $has_required['revision'] && !user_access('erri:bypass_revisions');
              // Get replacement candidates.
              $replacement_candidates = ( $required ? array() : array(0 => t('Nothing - set referring fields to empty')) ) +
                      $delete_form['candidates']($delete_form['target_type'], $bundle, $single_item ? array($id) : $parent_entity_ids);
              if ( !empty($replacement_candidates) ) {
                $form[$description_outer_element]['#weight'] = 10;
                $form['erri_new_target'] = array(
                  '#type' => 'select',
                  '#title' => t('Replace all with'),
                  '#size' => 1,
                  '#options' => $replacement_candidates,
                  '#required' => $required,
                  '#description' => t('Choose a replacement option to replace <strong>ALL</strong> references in the listed items.  '
                          . 'Once the change is made, <strong>IT CANNOT BE UNDONE!</strong>'),
                  '#element_validate' => $required ? array('erri_new_target_validate') : array(),
                  '#weight' => 11,
                );
                $form[$submit_outer_element]['#weight'] = 100;
              }
            }

          default:
            if ( $single_item ) {
              $description_additions['top'] = t('%title cannot be deleted without !action:', array(
                '%title' => $title,
                '!action' => empty($replacement_candidates)
                        ? t('emptying')
                        : ( ( empty($required) ? t('emptying or ') : '' ) . t('changing the referrenced item for') )
              ));
            }
            else {
              $description_additions['top'] = t('One or more of the @title cannot be deleted without !action referring fields:', array(
                '@title' => $title,
                '!action' => empty($replacement_candidates)
                        ? t('emptying')
                        : ( ( empty($required) ? t('emptying or ') : '' ) . t('changing the referrenced item for') )
              ));
            }
            if ( $has_required['current'] || $has_required['revision'] ) {
              // If we get this far, then the user has permissions to bypass restrict
              // referrential integrity or can do a mass change, so warn them nonetheless
              // that they're about to make irreversable changes.
              $description_additions['bottom'] = '<p style="color:red;">' . t('<strong>WARNING: </strong> Proceeding to delete !things will '
                      . 'set all referring fields to !what, including ALL required fields in ALL revisions, both current and prior. '
                      . '<strong>This cannot be undone!</strong>',
                      array(
                        '!things' => $single_item ? t('this entity') : t('these entities'),
                        '!what' => empty($replacement_candidates)
                                ? t('empty')
                                : ( ( empty($required) ? t('empty or ') : '' ) . t('the new referrenced item (what you choose in "Replace all with" below)') )
                      )) . '</p>';
            }
            $submit_element['#suffix'] = t('and !action <strong>all</strong> referring fields.', array(
                    '!action' => empty($replacement_candidates)
                            ? t('empty')
                            : ( ( empty($required) ? t('empty or ') : '' ) . t('change the referrenced item for') )
                    )) . ' ' .
                    ( !empty($submit_element['#suffix']) ? $submit_element['#suffix'] : '' ) . ' &nbsp; &nbsp; ';
            $submit_element['#attributes']['title'] = t('Click to delete !things and !action all referring fields', array(
                    '!things' => $single_item ? t('this entity') : t('these entities'),
                    '!action' => empty($replacement_candidates)
                            ? t('empty')
                            : ( ( empty($required) ? t('empty or ') : '' ) . t('change the referrenced item for') ),
            ));
            $form['#submit'][] = 'erri_delete_form_submit';
            break;
        }
        $description_element = ( empty($submit_element['#disabled']) ? $description_element : '' ) . '<div class="erri">' .
                implode('', $description_additions) . '</div>';
        $form['#attached']['css'][] = drupal_get_path('module', 'erri') . '/erri.css';
      }
    }
  }
}

/**
 * Validate form element.
 */
function erri_new_target_validate($element, &$form_state) {
  $value = $element['#value'];
  if ( !is_numeric($value) || intval($value) != $value || $value <= 0 ) {
    form_error($element, t('%name must be specified.', array(
      '%name' => $element['#title'],
    )));
  }
}

/**
 * Additional submit handler to set null target IDs when the referring fields do
 * not require a value or change to an alternate entity, and the user has decided
 * to delete the referred-to entity anyway.
 * @param array $form The form render array.
 * @param array $form_state The state of the form.
 */
function erri_delete_form_submit($form, &$form_state) {
  $reference_fields = erri_get_reference_fields();
  $change_count = array('FIELD_LOAD_CURRENT' => 0, 'FIELD_LOAD_REVISION' => 0);
  $changed_items = array();
  $replacement = !empty($form_state['values']['erri_new_target']) ? $form_state['values']['erri_new_target'] : FALSE;
  foreach ( $form_state['values']['erri_parent_info'] as $entity_id => $entity_info ) {
    foreach ( $entity_info['fields'] as $field_name ) {
      $field = $reference_fields[$field_name];
      foreach ( array('FIELD_LOAD_CURRENT', 'FIELD_LOAD_REVISION') as $revision ) {
        if ( empty($field['storage']['details']['sql'][$revision]) ) {
          continue;
        }
        foreach ( $field['storage']['details']['sql'][$revision] as $table => $column ) {
          $column_name = current($column);
          if ( $replacement ) {
            $result = db_update($table)
                    ->fields(array($column_name => $replacement))
                    ->condition($column_name, $entity_id)
                    ->execute();
          }
          else {
            $result = db_delete($table)->condition($column_name, $entity_id)->execute();
          }
          if ( $result ) {
            $change_count[$revision] += $result;
            $changed_items[] = t('Field %field (!version) !action where referenced entity was @type %title (ID: !id) - !count changed.',
                    array(
                      '%field' => $field_name,
                      '!version' => $revision == 'FIELD_LOAD_CURRENT' ? t('current version') : t('revisions'),
                      '!action' => $replacement
                              ? t('changed to %item', array(
                                      '%item' => $form['erri_new_target']['#options'][$replacement],
                                ))
                              : t('set to empty'),
                      '@type' => $entity_info['type'] == 'node' ? $entity_info['bundle'] : $entity_info['type'],
                      '%title' => $entity_info['title'],
                      '!id' => $entity_id,
                      '!count' => $result,
                    ));
          }
        }
      }
    }
  }
  drupal_flush_all_caches();
  drupal_set_message(format_plural(max($change_count), 'One reference !action.', '@count references !action.',
          array('!action' => $replacement ? t('changed') : t('emptied'))));
  watchdog('erri', '!count field reference targets altered: !list',
          array( '!count' => array_sum($change_count), '!list' => '<ol><li>' . implode('</li><li>', $changed_items) . '</li></ol>'));
}

/**
 * Assemble all child (referring) entities of a parent entity for referential integrity check.
 * @param string $parent_entity_type The entity_type of the parent entity (eg., 'node', 'user', 'taxonomy_term', etc.).
 * @param int $id The ID of the parent entity.
 * @param string $bundle The bundle of the parent in the case that the parent entity type uses bundles.
 * @return array Child entities referring to the parent, keyed on the referencing field with sub-arrays of the
 *   entities referencing, or an empty array if no entities refer to the parent.
 */
function erri_get_child_entities($parent_entity_type, $id, $bundle = NULL) {
  $child_entities = array();
  $reference_fields = erri_get_reference_fields();
  if ( !empty($reference_fields) ) {
    $entity_info = entity_get_info();
    foreach ( $reference_fields as $field ) {
      // If it's an entityreference referring to the right entity type, or...
      if ( ( !empty($field['type']) && (
              $field['type'] == 'entityreference' && !empty($field['settings']['target_type']) &&
              $field['settings']['target_type'] == $parent_entity_type ||
              // ...it's a taxonomy term reference and we're testing against a taxonomy term, and...
              $field['type'] == 'taxonomy_term_reference' && $parent_entity_type == 'taxonomy_term' ) &&
              // ...the field is in fact being used, and...
              !empty($field['storage']['details']['sql']['FIELD_LOAD_CURRENT']) && (
              // ...either the form isn't for an entity type that uses bundles, or...
              empty($bundle) || empty($field['settings']['handler_settings']['target_bundles']) ||
              // ...the entity's bundle is one of the field's target bundles...
              is_array($field['settings']['handler_settings']['target_bundles']) &&
              in_array($bundle, $field['settings']['handler_settings']['target_bundles']) ) ) ) {
        $child_entities[$field['field_name']] = array();
        foreach ( $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] as $table => $column ) {
          $column_name = current($column);
          // Use the CONCAT in the select to ensure a unique primary key and thus index on the array
          // so that array arithmetic doesn't stomp on array elements.
          $child_entities[$field['field_name']] += db_query("SELECT *, "
                  . "CONCAT(entity_type, ':', bundle, ':', entity_id, ':', revision_id) AS pk, "
                  . "'current' AS revision FROM {{$table}} "
                  . "WHERE $column_name = :id AND deleted = 0", array(':id' => $id))->fetchAllAssoc('pk');
        }
        // Now see if there are any previous revisions.
        if ( !empty($field['storage']['details']['sql']['FIELD_LOAD_REVISION']) ) {
          foreach ( $field['storage']['details']['sql']['FIELD_LOAD_REVISION'] as $table => $column ) {
            $column_name = current($column);
            $query = db_select($table, $table)
                    ->fields($table)
                    ->condition($column_name, $id)
                    ->condition('deleted', 0);
            // Use the CONCAT in the select to ensure a unique primary key and thus index on the array
            // so that array arithmetic doesn't stomp on array elements.
            $query->addExpression("CONCAT($table.entity_type, ':', $table.bundle, ':', $table.entity_id, ':', $table.revision_id)", 'pk');
            $query->addExpression("'revision'", 'revision');
            if ( !empty($field['settings']['target_type']) &&
                    !empty($entity_info[$field['settings']['target_type']]['revision table']) &&
                    !empty($entity_info[$field['settings']['target_type']]['entity keys']['id']) &&
                    !empty($entity_info[$field['settings']['target_type']]['entity keys']['revision']) &&
                    db_field_exists($entity_info[$field['settings']['target_type']]['revision table'], 'timestamp')) {
              $revision_entity_info = &$entity_info[$field['settings']['target_type']];
              $query->addJoin('inner', $revision_entity_info['revision table'],
                      'r', "$table.entity_id = r.{$revision_entity_info['entity keys']['id']} AND "
                      . "$table.revision_id = r.{$revision_entity_info['entity keys']['revision']} AND "
                      . "$table.entity_type = '{$field['settings']['target_type']}'");
              $query->addField('r', 'timestamp', 'revision_timestamp');
            }
            $child_entities[$field['field_name']] += $query->execute()->fetchAllAssoc('pk');
          }
        }
        if ( empty($child_entities[$field['field_name']]) ) {
          unset($child_entities[$field['field_name']]);
        }
        else {
          krsort($child_entities[$field['field_name']]);
        }
      }
    }
  }
  foreach ( module_implements('erri_reference_check') as $module ) {
    $function = $module . '_erri_reference_check';
    $result = $function($parent_entity_type, $id, $bundle);
    if ( is_array($result) ) {
      $child_entities += $result;
    }
  }
  return $child_entities;
}

/**
 * Helper function to get all reference fields.
 * @staticvar array $reference_fields All reference fields.
 * @return array All reference fields.
 */
function erri_get_reference_fields() {
  static $reference_fields = array();
  if ( empty($reference_fields) ) {
    // Get only entity and taxonomy reference fields.
    $reference_fields = array_filter(field_info_field_map(), function ($field) {
      return $field['type'] == 'entityreference' || $field['type'] == 'taxonomy_term_reference';
    });
    // Retrieve field info for each field.
    array_walk($reference_fields, function(&$field, $key) {
      return $field = field_info_field($key);
    });
    // Allow other modules to add to the reference fields.
    foreach ( module_implements('erri_reference_fields') as $module ) {
      $function = $module . '_erri_reference_fields';
      $additional_fields = $function();
      if ( is_array($additional_fields) ) {
        $reference_fields += $additional_fields;
      }
    }
  }
  return $reference_fields;
}

/**
 * Helper function to arrange child entities in an array of strings.
 * @param array $child_entities An array of child entities to be listed.
 * @param bool $has_required Passed by reference, a flag array (keys 'current' and
 *   'revision') indicating if any of the listed fields are required fields in
 *   current or revision versions of referring entities.
 * @param bool $has_edit_permissions Passed by reference, a flag indicating if the
 *   current user has permissions to edit all child entities.
 * @return array The list of strings.
 */
function _erri_list_children($child_entities, &$has_required, &$has_edit_permissions) {
  foreach ( $child_entities as $field_name => $children ) {
    foreach ( $children as $child ) {
      $list[] = _erri_get_reference($child, $field_name, $has_required, $has_edit_permissions);
    }
  }
  return $list;
}

/**
 * Helper function to specify the wording and link around a reference.
 * @param mixed $child The child entity with the reference if an object, or a custom
 *   array per the API documentation.
 * @param string $field_name The machine name of the field referencing the child.
 * @param bool $has_required Passed by reference, a flag array (keys 'current' and
 *   'revision') indicating if any of the listed fields are required fields in
 *   current or revision versions of referring entities.
 * @param bool $has_edit_permissions Passed by reference, a flag indicating if the
 *   current user has permissions to edit all child entities.
 * @return string The referencing message.
 */
function _erri_get_reference($child, $field_name, &$has_required, &$has_edit_permissions) {
  if ( is_array($child) ) {
    // This is a custom value provided through the API, as otherwise $child would be an object.
    if ( !empty($child['#markup']) ) {
      if ( !empty($child['#required']) ) {
        $has_required['current'] |= $child['#required'];
        $has_required['revision'] |= $child['#required'];
      }
      if ( !empty($child['#has_permissions']) ) {
        $has_edit_permissions &= $child['#has_permissions'];
      }
      $reference = $child['#markup'];
      if ( !empty($child['#required']) ) {
        $reference = '<span class="erri-required-reference">' . $reference . '</span>';
      }
      return $reference;
    }
    else {
      watchdog('erri', 'Custom markup not set.', WATCHDOG_ERROR);
      $has_required['current'] = TRUE; // Just set this as a default.
      $has_required['revision'] = TRUE;
      $has_edit_permissions = FALSE;
      return t('something else on the site') . ' <span class="form-required" title="' .
              t('This field is required.') . '">*</span>';
    }
  }
  $entity_info = entity_get_info($child->entity_type);
  if ( function_exists($entity_info['load hook']) ) {
    try {
      $child_entity = $entity_info['load hook']($child->entity_id);
    }
    catch ( Exception $e ) {
    }
  }
  else {
    watchdog('erri', 'Load function %function does not exist for @type @id.', array(
        '%function' => $entity_info['load hook'],
        '@type' => $child->entity_type,
        '@id' => $child->entity_id,
      ), WATCHDOG_ERROR);
    $has_required['current'] = TRUE; // Just set this as a default.
    $has_required['revision'] = TRUE;
    $has_edit_permissions = FALSE;
    return t('something else on the site') . ' <span class="form-required" title="' .
            t('This field is required.') . '">*</span>';
  }
  if ( !empty($entity_info['entity keys']['bundle']) ) {
    $type = $child_entity->{$entity_info['entity keys']['bundle']};
    $type_name = $entity_info['bundles'][$child_entity->{$entity_info['entity keys']['bundle']}]['label'];
  }
  else {
    $type = $child->entity_type;
    $type_name = $entity_info['label'];
  }
  $field = field_info_field($field_name);
  $field_instance = field_info_instance($child->entity_type, $field_name, $type);
  $required = $field_instance['required'] ? ' <span class="form-required" title="' .
          t('This field is required.') . '">*</span>' : '';
  $reference = t('a field!required in a content item', array('!required' => $required));
  $has_required[$child->revision] |= $field_instance['required'];
  $has_edit_permissions &= entity_access('update', $child->entity_type, $child_entity) &&
          field_access('update', $field, $child->entity_type, $child_entity);
  if ( entity_access('view', $child->entity_type, $child_entity) &&
          field_access('view', $field, $child->entity_type, $child_entity) ) {
    $uri = entity_uri($child->entity_type, $child_entity);
    if ( !($name = entity_label($child->entity_type, $child_entity)) ) {
      $name = t('with id @id', array('@id' => $child->entity_id));
    }
    $reference = t('field %field!required in !revision @type !name', array(
      '%field' => $field_instance['label'],
      '!required' => $required,
      '!revision' => $child->revision == 'revision'
            ? ( !empty($child->revision_timestamp)
              ? t('the !ts revision of', array('!ts' => format_date($child->revision_timestamp)))
              : t('a previous revision of') )
            : '',
      '@type' => strtolower($type_name),
      '!name' => l($name, $uri['path']),
    ));
    if ( $field_instance['required'] ) {
      $reference = '<span class="erri-required-reference">' . $reference . '</span>';
    }
  }
  return $reference;
}


<?php
/**
 * @file
 * Module main file
 */

/**
 * Implements hook_form_alter().  Determine if there are child entities, and act accordingly.
 */
function erri_form_alter(&$form, &$form_state, $form_id) {
  // Get a list of all delete forms via hook_erri_info().
  static $delete_forms = array();
  if ( empty($delete_forms) ) {
    module_load_include('inc', 'erri');
    $hooks = module_implements('erri_info');
    foreach ( $hooks as $hook ) {
      $function = $hook . '_erri_info';
      if ( function_exists($function) ) {
        $result = $function();
        if ( is_array($result) ) {
          $delete_forms += $result;
        }
      }
    }
  }

  // If the current form is a delete form...
  if ( !empty($delete_forms[$form_id]) ) {
    $delete_form = &$delete_forms[$form_id] + array(
      'entity_id' => 'id',
      'target_type' => NULL,
      'bundles' => FALSE,
      'name_field' => 'name',
      'entity_load_function' => 'entity_load',
    );
    $form_copy = $form; // Keep the original form array 'safe'.
    // ...and this is the delete version of the form for forms that serve multiple purposes...
    if ( empty($delete_form['is_delete_form']) || !empty($delete_form['is_delete_form']) &&
            function_exists($delete_form['is_delete_form']) && $delete_form['is_delete_form']($form_copy) ) {
      // If 'entity' is specified in the delete from, then this is a single instance delete form.
      if ( !empty($delete_form['entity']) && function_exists($delete_form['entity']) ) {
        $single_item = TRUE;
        // Retrieve the entity being deleted from the form.
        $entity = $delete_form['entity']($form_copy);
        // Get the entity's ID.
        $id = $entity->{$delete_form['entity_id']};
        $child_entities = erri_get_child_entities($delete_form['target_type'], $id,
                !empty($delete_form['bundles']), !empty($entity->type) ? $entity->type : NULL);
        $field_names = array($id => array_keys($child_entities));
        $title = $entity->{$delete_form['name_field']};
      }
      // If 'entities' is specified, then this is a multi-entity delete form
      elseif ( !empty($delete_form['entities']) && function_exists($delete_form['entities']) ) {
        $single_item = FALSE;
        $child_entities = array();
        // Get the entities from the form.
        $entities = $delete_form['entities']($form_copy);
        $entity_ids = element_children($entities);
        $field_names = array();
        foreach ( $entity_ids as $id ) {
          // Get the full entity via the entity's load function.
          $entity = $delete_form['entity_load_function']($id);
          // Group index is used as a title for a section.
          $group_index = $entity->{$delete_form['name_field']} . ( !empty($delete_form['use_id_in_name']) ? " ($id)" : '' );
          $child_entities[$group_index] = erri_get_child_entities($delete_form['target_type'], $id,
                  !empty($delete_form['bundles']), !empty($entity->type) ? $entity->type : NULL);
          if ( empty($child_entities[$group_index]) ) {
            unset($child_entities[$group_index]);
          }
          else {
            $field_names[$id] = array_keys($child_entities[$group_index]);
          }
        }
        $title = $delete_form['type_name'];
      }

      if ( !empty($child_entities) ) {
        $has_required = FALSE;
        if ( $single_item ) {
          $list = _erri_list_children($child_entities, $has_required);
          if ( $has_required ) {
            drupal_set_title(t('Cannot delete %title', array('%title' => check_plain($title))), PASS_THROUGH);
            $form['description']['#markup'] = '<div class="erri">' . t('%title cannot be deleted because it is referred to by:',
                    array('%title' => $title));
          }
          else {
            $form['description']['#markup'] .= '<div class="erri">' . t('%title cannot be deleted without emptying:',
                    array('%title' => $title));
          }
        }
        else {
          $list = array();
          foreach ( $child_entities as $entity => $children ) {
            $sub_list = _erri_list_children($children, $has_required);
            $list[] = t('%entity is referred to by:', array('%entity' => $entity)) . '<ul><li>' . implode('</li><li>', $sub_list) . '</li></ul>';
          }
          if ( $has_required ) {
            drupal_set_title(t('Cannot delete one or more of the @title', array('@title' => strtolower($title))), PASS_THROUGH);
            $form['description']['#markup'] = '<div class="erri">' . t('One or more of the @title cannot be deleted because:',
                    array('@title' => $title));
          }
          else {
            $form['description']['#markup'] .= '<div class="erri">' . t('One or more of the @title cannot be deleted without emtpying referring fields:',
                    array('@title' => $title));
          }
        }

        $form['description']['#markup'] .= '<ul><li>' . implode('</li><li>', $list) . '</li></ul>';
        if ( $has_required ) {
          $form['description']['#markup'] .= '<p><span class="form-required" title="' .
                  t('This field is required.') . '">*</span> ' .
                  t('Required field - cannot be left blank.') . '</p>';
          $form['actions']['submit']['#disabled'] = TRUE;
        }
        else {
          $form['actions']['submit']['#value'] .= ' ' . t('and empty referring fields');
          $form['erri_entities_and_field_names'] = array('#type' => 'value', '#value' => $field_names);
          $form['#submit'][] = 'erri_delete_form_submit';
        }
        $form['description']['#markup'] .= '</div>';
        $form['#attached']['css'][] = drupal_get_path('module', 'erri') . '/erri.css';
      }
    }
  }
}

/**
 * Assemble all child entities of a parent entity for referential integrity check.
 * @param string $parent_entity_type The entity_type of the parent entity (eg., 'node', 'user', 'taxonomy_term', etc.).
 * @param int $id The ID of the parent entity.
 * @param bool $parent_entity_type_has_bundles True if the entity type of the parent entity has bundles (such as is the case with nodes).
 * @param string $bundle The bundle of the parent in the case that the parent entity type uses bundles.
 * @return array Child entities referring to the parent, keyed on the referencing field with sub-arrays of the
 *   entities referencing, or an empty array if no entities refer to the parent.
 */
function erri_get_child_entities($parent_entity_type, $id, $parent_entity_type_has_bundles = FALSE, $bundle = '') {
  $child_entities = array();
  $reference_fields = field_read_fields(array('type' => 'entityreference'));
  if ( $parent_entity_type == 'taxonomy_term' ) {
    $reference_fields += field_read_fields(array('type' => 'taxonomy_term_reference'));
  }
  foreach ( $reference_fields as $field ) {
    // If it's an entityreference referring to the right entity type, or...
    if ( ( $field['type'] == 'entityreference' && $field['settings']['target_type'] == $parent_entity_type  ||
            // ...it's a taxonomy term reference and we're testing against a taxonomy term, and...
            $field['type'] == 'taxonomy_term_reference' && $parent_entity_type == 'taxonomy_term' ) &&
            // ...the field is in fact being used, and...
            !empty($field['storage']['details']['sql']['FIELD_LOAD_CURRENT']) && (
            // ...and either the form isn't for an entity type that uses bundles, or...
            !$parent_entity_type_has_bundles ||
            // ...the entity type (bundle) is one of the field's target bundles...
            in_array($bundle, $field['settings']['handler_settings']['target_bundles']) ) ) {
      $child_entities[$field['field_name']] = array();
      foreach ( $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] as $table => $column ) {
        $column_name = current($column);
        // Use the CONCAT in the select to ensure a unique primary key and thus index on the array
        // so that array arithmatic doesn't stomp on array elements.
        $child_entities[$field['field_name']] += db_query("SELECT *, CONCAT(entity_type, ':', bundle, ':', entity_id) AS pk FROM {{$table}} "
        . "WHERE $column_name = :id AND deleted = 0", array(':id' => $id))->fetchAllAssoc('pk');
      }
      if ( empty($child_entities[$field['field_name']]) ) {
        unset($child_entities[$field['field_name']]);
      }
    }
  }
  return $child_entities;
}

/**
 * Helper function to arrange child entities in an array of strings.
 * @param array $child_entities An array of child entities to be listed.
 * @param bool $has_required Passed by reference, a flag indicating if any of the
 *   listed fields are required fields.
 * @return array The list of strings.
 */
function _erri_list_children($child_entities, &$has_required) {
  foreach ( $child_entities as $field_name => $children ) {
    foreach ( $children as $child ) {
      $list[] = _erri_get_reference($child, $field_name, $has_required);
    }
  }
  return $list;
}

/**
 * Helper function to specify the wording and link around a reference.
 * @param object $child The child entity with the reference.
 * @param string $field_name The machine name of the field referencing the child.
 * @param bool $has_required Passed by reference, a flag indicating if any of the
 *   previous listed fields are required fields, and set to TRUE if this field's
 *   instance is required.
 * @return string The referencing message.
 */
function _erri_get_reference($child, $field_name, &$has_required) {
  switch ( $child->entity_type ) {
    case 'node' :
      $field_instance = field_info_instance($child->entity_type, $field_name, $child_entity->type);
      $required = $field_instance['required'] ? ' <span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';
      $reference = t('a field!required in a content item', array('!required' => $required));
      $has_required |= $field_instance['required'];
      $child_entity = node_load($child->entity_id);
      if ( entity_access('view', $child->entity_type, $child_entity) ) {
        $field = field_info_field($field_name);
        if ( field_access('view', $field, $child->entity_type, $child_entity) ) {
          $reference = t('field %field!required in @type !name', array(
            '%field' => $field_instance['label'],
            '!required' => $required,
            '@type' => strtolower(node_type_get_name($child_entity)),
            '!name' => l($child_entity->title, 'node/'.$child->entity_id),
          ));
        }
      }
      break;

    case 'user':
      $field_instance = field_info_instance('user', $field_name, 'user');
      $required = $field_instance['required'] ? ' <span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';
      $reference = t('a field!required in a person', array('!required' => $required));
      $has_required |= $field_instance['required'];
      if ( user_access('access user profiles') ) {
        $child_entity = user_load($child->entity_id);
        if ( entity_access('view', $child->entity_type, $child_entity) ) {
          $field = field_info_field($field_name);
          if ( field_access('view', $field, $child->entity_type, $child_entity) ) {
            $reference = t('field %field!required in person !person', array(
              '%field' => $field_instance['label'],
              '!required' => $required,
              '!person' => l($child_entity->name, 'user/'.$child->entity_id),
            ));
          }
        }
      }
      break;

    case 'taxonomy_term' :
      $field_instance = field_info_instance('taxonomy_term', $field_name, 'taxonomy_term');
      $required = $field_instance['required'] ? ' <span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';
      $reference = t('a field!required in a taxonomy term', array('!required' => $required));
      $has_required |= $field_instance['required'];
      $child_entity = taxonomy_term_load($child->entity_id);
      if ( entity_access('view', $child->entity_type, $child_entity) ) {
        $field = field_info_field($field_name);
        if ( field_access('view', $field, $child->entity_type, $child_entity) ) {
          $reference = t('field %field!required in taxonomy term %term', array(
            '%field' => $field_instance['label'],
            '!required' => $required,
            '%term' => $child_entity->name
          ));
        }
      }
      break;

    default:
      $entity_info = entity_get_info($child->type);
      try {
        $child_entity = $entity_info['load hook']($child->entity_id);
      }
      catch ( Exception $e ) {
        $has_required = TRUE; // Just set this as a default.
        return t('something else on the site') . ' <span class="form-required" title="' . t('This field is required.') . '">*</span>';
      }
      $field_instance = field_info_instance($child->entity_type, $field_name, !empty($child_entity->type) ? $child_entity->type : $child->entity_type);
      $reference = t('a !required field in something else on the site', array('!required' => $field_instance['required'] ? t('required') : ''));
      $has_required |= $field_instance['required'];
      if ( entity_access('view', $child->entity_type, $child_entity) ) {
        $field = field_info_field($field_name);
        if ( field_access('view', $field, $child->entity_type, $child_entity) ) {
          $required = $field_instance['required'] ? ' <span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';
          $reference = t('field %field!required in @entity_type %name', array(
            '%field' => $field_instance['label'],
            '!required' => $required,
            '@entity_type' => $child->entity_type,
            '%name' => !empty($child_entity->name) ? $child_entity->name : '',
          ));
        }
      }
      break;
  }
  return $reference;
}

/**
 * Additional submit handler to set null target IDs when the referring fields do
 * not require a value, and the user has decided to delete the referred-to entity
 * anyway.
 * @param array $form The form render array.
 * @param array $form_state The state of the form.
 */
function erri_delete_form_submit($form, &$form_state) {
  $entities_and_field_names = $form_state['values']['erri_entities_and_field_names'];
  foreach ( $entities_and_field_names as $entity_id => $field_name ) {
    $field = field_info_field($field_name);
    foreach ( $field['storage']['details']['sql']['FIELD_LOAD_CURRENT'] as $table => $column ) {
      $column_name = current($column);
      db_delete($table)->condition($column_name, $entity_id)->execute();
    }
  }
  drupal_flush_all_caches();
}
